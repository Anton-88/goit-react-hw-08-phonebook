{"version":3,"sources":["pages/RegisterView/RegisterView.module.css","pages/RegisterView/RegisterView.jsx"],"names":["module","exports","RegisterView","dispatch","useDispatch","isLoading","useSelector","authSelectors","getLoading","useState","name","setName","email","setEmail","password","setPassword","handleChange","e","target","value","onSubmit","preventDefault","trim","toast","error","length","info","authOperations","register","className","styles","form","autoComplete","TextField","label","variant","color","type","onChange","textField","Button","size","LoaderComponent"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,KAAO,2BAA2B,UAAY,kC,+KCQjD,SAASC,IACpB,IAAMC,EAAWC,cACXC,EAAYC,YAAYC,IAAcC,YAC5C,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAAC,GACjB,MAAwBA,EAAEC,OAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MAEd,OAAQT,GACJ,IAAK,OACD,OAAOC,EAAQQ,GACnB,IAAK,QACD,OAAON,EAASM,GACpB,IAAK,WACD,OAAOJ,EAAYI,GACvB,QACI,SAiBZ,OACI,uBAAMC,SAdW,SAAAH,GAEjB,OADAA,EAAEI,iBACkB,KAAhBX,EAAKY,QAAkC,KAAjBV,EAAMU,QAAqC,KAApBR,EAASQ,OAC/CC,IAAMC,MAAM,+BACZV,EAASW,OAAS,EAClBF,IAAMG,KAAK,kDAEtBvB,EAASwB,IAAeC,SAAS,CAAElB,OAAME,QAAOE,cAChDH,EAAQ,IACRE,EAAS,SACTE,EAAY,MAIkBc,UAAWC,IAAOC,KAAMC,aAAa,MAAnE,UACI,cAACC,EAAA,EAAD,CACIC,MAAM,OACNC,QAAQ,WACRC,MAAM,YACNC,KAAK,OACL3B,KAAK,OACLS,MAAOT,EACP4B,SAAUtB,EACVa,UAAWC,IAAOS,YAGtB,cAACN,EAAA,EAAD,CACIC,MAAM,QACNC,QAAQ,WACRC,MAAM,YACNC,KAAK,QACL3B,KAAK,QACLS,MAAOP,EACP0B,SAAUtB,EACVa,UAAWC,IAAOS,YAGtB,cAACN,EAAA,EAAD,CACIC,MAAM,WACNC,QAAQ,WACRC,MAAM,YACNC,KAAK,WACL3B,KAAK,WACLS,MAAOL,EACPwB,SAAUtB,EACVa,UAAWC,IAAOS,aAGpBlC,GACE,cAACmC,EAAA,EAAD,CACIL,QAAQ,YACRC,MAAM,YACNK,KAAK,QACLJ,KAAK,SAJT,qBAUHhC,GAAa,cAACqC,EAAA,EAAD","file":"static/js/register page.ca7a54e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"RegisterView_form__1WOqn\",\"textField\":\"RegisterView_textField__2cohC\"};","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LoaderComponent from '../../components/LoaderComponent';\r\nimport { authOperations, authSelectors } from '../../redux/auth';\r\nimport { toast } from 'react-toastify';\r\nimport styles from './RegisterView.module.css';\r\n\r\nexport default function RegisterView() {\r\n    const dispatch = useDispatch();\r\n    const isLoading = useSelector(authSelectors.getLoading);\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const handleChange = e => {\r\n        const { name, value } = e.target;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                return setName(value);\r\n            case 'email':\r\n                return setEmail(value);\r\n            case 'password':\r\n                return setPassword(value);\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (name.trim() === '' || email.trim() === '' || password.trim() === '') {\r\n            return toast.error('Please fill all the fields!');\r\n        } else if (password.length < 7) {\r\n            return toast.info('Passwords must be at least 7 characters long!');\r\n        }\r\n        dispatch(authOperations.register({ name, email, password }));\r\n        setName('');\r\n        setEmail('');\r\n        setPassword('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={styles.form} autoComplete=\"off\">\r\n            <TextField\r\n                label=\"Name\"\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={name}\r\n                onChange={handleChange}\r\n                className={styles.textField}\r\n            />\r\n\r\n            <TextField\r\n                label=\"Email\"\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={email}\r\n                onChange={handleChange}\r\n                className={styles.textField}\r\n            />\r\n\r\n            <TextField\r\n                label=\"Password\"\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                value={password}\r\n                onChange={handleChange}\r\n                className={styles.textField}\r\n            />\r\n\r\n            {!isLoading && (\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                >\r\n                    Sign up\r\n                </Button>\r\n            )}\r\n\r\n            {isLoading && <LoaderComponent />}\r\n        </form>\r\n    );\r\n}\r\n"],"sourceRoot":""}